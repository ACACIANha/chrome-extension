#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# A simple native messaging host. Shows a Tkinter dialog with incoming messages
# that also allows to send message back to the webapp.
import struct
import sys
import threading

import logging

import json
import os
import subprocess

try:
    import tkinter
except ImportError:
    tkinter = None

try:
    import Tkinter
    import tkMessageBox
except ImportError:
    Tkinter = None

# import queue module
try:
    import Queue

    QueueCheck = True
except ImportError:
    QueueCheck = None

try:
    from queue import Queue

    queueCheck = True
except ImportError:
    queueCheck = None

logging.basicConfig(filename='./info.log', level=logging.INFO)
logging.basicConfig(filename='./debug.log', level=logging.DEBUG)
logging.info('sys.platform : ' + sys.platform)
logging.info('sys.version : ' + sys.version)
logging.info(sys.version_info)

# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if sys.platform == "win32":
    import os, msvcrt

    msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)


# Helper function that sends a message to the webapp.
def send_message(message):
    # Write message size.

    logging.info('send_message1')
    if sys.version_info[0] < 3:
        logging.info('send_message_version2')
        sys.stdout.write(struct.pack('I', len(message)))
    if sys.version_info[0] >= 3:
        logging.info('send_message_version3')
        sys.stdout.buffer.write(struct.pack('I', len(message)))

    # sys.stdout.write(struct.pack('I', len(message)))
    # Write the message itself.
    logging.info('send_message2')
    sys.stdout.write(message)
    logging.info('send_message3')
    sys.stdout.flush()
    logging.info('send_message4')


def send_message_string_to_json(message):
    tempString = {
        "text": message
    }
    tempJson = json.dumps(tempString)
    logging.info('send_message_string_to_json' + tempJson)
    send_message(tempJson)


# Thread that reads messages from the webapp.
def read_thread_func(queue):
    logging.info('read_thread_func')
    while 1:
        # Read the message length (first 4 bytes).
        logging.info('read_thread_func_while1')
        logging.info(sys.version_info[0])
        logging.info(sys.version_info[1])
        logging.info(sys.version_info[2])

        logging.info('read_thread_func_while2')

        if sys.version_info[0] < 3:
            logging.info('read_thread_func_version2')
            text_length_bytes = sys.stdin.read(4)
        if sys.version_info[0] >= 3:
            logging.info('read_thread_func_version3')
            text_length_bytes = sys.stdin.buffer.read(4)

        logging.info('read_thread_func_while3')

        if len(text_length_bytes) == 0:
            if queue:
                queue.put(None)
            logging.info('close')
            sys.exit(0)

        # int.from_bytes(text_length_bytes, 'little')       //python3 ?

        # Unpack message length as 4 byte integer.
        logging.info('read_thread_func_before_unpack')
        text_length = struct.unpack('i', text_length_bytes)[0]
        logging.info('read_thread_func_after_unpack')
        # Read the text (JSON object) of the message.

        if sys.version_info[0] < 3:
            logging.info('read_thread_func_version2')
            text = sys.stdin.read(text_length).decode('utf-8')
        if sys.version_info[0] >= 3:
            logging.info('read_thread_func_version3')
            text = sys.stdin.buffer.read(text_length).decode('utf-8')

        logging.info('read message' + text)

        y = json.loads(text)
        path = y["text"]

        logging.info(sys.platform)
        if sys.platform == "darwin":
            logging.info('open in mac')
            openCommandHead = 'open /Applications/'
            openCommandTail = '.app'
            # num = os.system(openCommandHead + path + openCommandTail)

        if sys.platform == "win32":
            logging.info('open in window')
            openCommandHead = '"C:/Windows/System32/'
            openCommandTail = '.exe"'

        # if sys.platform == "win32":
        #     logging.info('open in window')
        #     openCommandHead = 'dir C:\\*.exe /s /b | findstr /i '
        #     openCommandTail = '.exe"'
        #     num = os.system(openCommandHead + path + openCommandTail)
        #     logging.info(num)
        #     num = os.system(num)
        #     logging.info(num)

        num = os.system(openCommandHead + path + openCommandTail)

        tempText = "default"
        if num == 0:
            tempText = "success"
        else:
            tempText = "fail"

        send_message_string_to_json(tempText)

        if queue:
            queue.put(text)
        else:
            # In headless mode just send an echo message back.
            send_message('{"echo": %s}' % text)


if tkinter:
    class NativeMessagingWindow3(tkinter.Frame):
        def __init__(self, queue):
            self.queue = queue

            tkinter.Frame.__init__(self)
            self.pack()
            self.after(100, self.processMessages)

        def processMessages(self):
            logging.debug('processMessages method')

            while not self.queue.empty():
                message = self.queue.get_nowait()
                if message == None:
                    self.quit()
                    return

            self.after(100, self.processMessages)

if Tkinter:
    class NativeMessagingWindow2(Tkinter.Frame):
        def __init__(self, queue):
            self.queue = queue

            Tkinter.Frame.__init__(self)
            self.pack()
            self.after(100, self.processMessages)

        def processMessages(self):
            while not self.queue.empty():
                message = self.queue.get_nowait()
                if message == None:
                    self.quit()
                    return
                self.log("Received %s" % message)

            self.after(100, self.processMessages)


def Main():
    if not tkinter:
        logging.error('not found tkinter')
    else:
        logging.info('found tkinter')

    if not Tkinter:
        logging.error('not found Tkinter')
    else:
        logging.info('found Tkinter')

    if not queueCheck:
        logging.error('not found queue module 3')
        if QueueCheck:
            logging.info('queue generate 2')
            queue = Queue.Queue()
            logging.info('queue generated 2')
        else:
            logging.error('not found Queue module 2')
    else:
        logging.info('Queue generate 3')
        queue = Queue()
        logging.info('Queue generated 3')

    if tkinter:
        main_window = NativeMessagingWindow3(queue)
    else:
        main_window = NativeMessagingWindow2(queue)

    logging.info('window generate success')
    main_window.master.title('Native Messaging Example')

    thread = threading.Thread(target=read_thread_func, args=(queue,))
    thread.daemon = True
    thread.start()
    logging.info('thread generate and start success')

    main_window.mainloop()

    sys.exit(0)


if __name__ == '__main__':
    Main()

# window cmd find exe
# dir C:\users\*.exe /s /b | find ^"temp^" /v /i | findstr /e .exe > UserExecutablePaths.txt
